@page "/game/{GameId}"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Generic
@using System.Text
@using System
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@implements IDisposable

<div style="text-align: center;">
  <h2>@stringResource[languageCode]["GameTitle"]</h2>
  @if (boardLineStrings.Count > 0)
  {
    <div>@stringResource[languageCode]["CopyLinkInstruction"]</div>
    <a href="@connectionUrl">@connectionUrl</a>
    <div>@connectedUsersMessage</div>
    <hr>

      <h3>@turnMessage</h3>
      @if (winnerChar != 'n')
      {
        <div>
          <button @onclick="NewGame" disabled="@(!IsConnected || lastPlayX == -1)">@stringResource[languageCode]["NewGameButton"]</button>
        </div>
        <br/>
      }
      <table style="border: none; display: inline;">
        @for (int j = 0; j < boardLineStrings.Count;++j)
        {
          <tr>
            @for (int i = 0; i < boardLineStrings[j].Length; ++i)
            {
              var x = i;
              var y = j;
              <td style="padding: 0px;">
                <div @onclick="@(e => Play(x, y))" style="width: 100%; height: 100%; display: block;">
                  @if ((x == lastPlayX && y == lastPlayY) || (x == lastLastPlayX && y == lastLastPlayY))
                    @svgCollection[Char.ToUpper(boardLineStrings[j][i])]
                  else
                    @svgCollection[boardLineStrings[j][i]]
                </div>
              </td>
            }
          </tr>
        }
      </table>
      <br/><br/>
      <p>
        <button @onclick="Undo" disabled="@(!IsConnected || lastPlayX == -1)">@stringResource[languageCode]["UndoButton"]</button>
      </p>
    <hr>
    <div>@stringResource[languageCode]["ExpirationMessage"]</div>
  }

  <div>@serverMessage</div>
</div>

@code {
  private HubConnection hubConnection;
  private List<string> boardLineStrings = new List<string>();
  private string connectedUsersMessage;
  private string turnMessage;
  private string serverMessage;
  private int lastPlayX = -1;
  private int lastPlayY = -1;
  private int lastLastPlayX = -1;
  private int lastLastPlayY = -1;
  private char winnerChar = 'n';
  private string languageCode;
  private Dictionary<char, MarkupString> svgCollection;

  private Dictionary<string, Dictionary<string, string>> stringResource;

  [Parameter]
  public string GameId { get; set; }

  protected override async Task OnInitializedAsync()
  {
    SetLanguage();
    SetSvgCollection();

    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/connect6hub"))
      .Build();

    hubConnection.On<Dictionary<string, string>>("CurrentBoard", (currentState) =>
    {
      var tempBoard = currentState["boardString"].Split("\n").ToList();
      lastPlayX = int.Parse(currentState["lastPlayX"]);
      lastPlayY = int.Parse(currentState["lastPlayY"]);
      lastLastPlayX = int.Parse(currentState["lastLastPlayX"]);
      lastLastPlayY = int.Parse(currentState["lastLastPlayY"]);
      winnerChar = DetermineWinner(tempBoard);

      if (winnerChar == 'n')
        turnMessage = String.Format(
          stringResource[languageCode]["TurnMessage"],
          currentState["currentTurn"] == "b" ? stringResource[languageCode]["Black"] : stringResource[languageCode]["White"],
          currentState["currentTurnRemaining"]
        );
      else
        turnMessage = String.Format(
          stringResource[languageCode]["VictoryMessage"],
          winnerChar == 'b' ? stringResource[languageCode]["Black"] : stringResource[languageCode]["White"]
        );

      boardLineStrings = tempBoard;
      StateHasChanged();
    });

    hubConnection.On<string>("ServerMessage", (messageString) =>
    {
      serverMessage = messageString;
      StateHasChanged();
    });

    hubConnection.On<string>("NoGameFound", (messageString) =>
    {
      serverMessage = stringResource[languageCode]["NoGameFound"];
      StateHasChanged();
    });

    hubConnection.On<int>("ConnectionSize", (connectionSize) =>
    {
      connectedUsersMessage = String.Format(stringResource[languageCode]["CurrentSessionUsersMessage"], connectionSize);
      StateHasChanged();
    });

    await hubConnection.StartAsync();
    await hubConnection.SendAsync("InitializeBoardAndConnection", GameId);
  }

  private char DetermineWinner(List<String> tempBoard)
  {
    if (IsVictory('b', tempBoard))
      return 'b';
    else if (IsVictory('w', tempBoard))
      return 'w';
    else
      return 'n';
  }

  private bool IsVictory(char stoneColor, List<String> tempBoard)
  {
    string winningString = $"{stoneColor}{stoneColor}{stoneColor}{stoneColor}{stoneColor}{stoneColor}";
    int dimX = tempBoard[0].Length;
    int dimY = tempBoard.Count;
    Console.WriteLine(dimX);
    Console.WriteLine(dimY);

    // Horizontal Match
    foreach (string line in tempBoard)
      if (line.Contains(winningString))
        return true;
    // Vertical Match
    for (int i = 0; i < dimX; ++i)
    {
      StringBuilder str = new StringBuilder();
      for (int j = 0; j < dimY; ++j)
        str.Append(tempBoard[j][i]);
      if (str.ToString().Contains(winningString))
        return true;
    }
    // Diagonal left
    Console.WriteLine("diagonal");
    for (int x = 0; x < dimX; ++x)
    {
      int i = x;
      int j = 0;
      StringBuilder str = new StringBuilder();
      while (0 <= i && i <= 18 && 0 <= j && j <= 18)
      {
        str.Append(tempBoard[j][i]);
        --i;
        ++j;
      }
      if (str.ToString().Contains(winningString))
        return true;
    }
    for (int y = 1; y < dimY; ++y)
    {
      int i = dimX - 1;
      int j = y;
      StringBuilder str = new StringBuilder();
      while (0 <= i && i <= 18 && 0 <= j && j <= 18)
      {
        str.Append(tempBoard[j][i]);
        --i;
        ++j;
      }
      if (str.ToString().Contains(winningString))
        return true;
    }
     // Diagonal right
    for (int x = 0; x < dimX; ++x)
    {
      int i = x;
      int j = 0;
      StringBuilder str = new StringBuilder();
      while (0 <= i && i <= 18 && 0 <= j && j <= 18)
      {
        str.Append(tempBoard[j][i]);
        ++i;
        ++j;
      }
      if (str.ToString().Contains(winningString))
        return true;
    }
    for (int y = 1; y < dimY; ++y)
    {
      int i = 0;
      int j = y;
      StringBuilder str = new StringBuilder();
      while (0 <= i && i <= 18 && 0 <= j && j <= 18)
      {
        str.Append(tempBoard[j][i]);
        ++i;
        ++j;
      }
      if (str.ToString().Contains(winningString))
        return true;
    }
    return false;
  }

  private Task Play(int x, int y)
  {
    if (winnerChar == 'n')
      return hubConnection.SendAsync("PlaceStone", GameId, x, y);
    else
      return Task.FromResult(0);
  }

  Task Undo() => hubConnection.SendAsync("UndoStone", GameId);

  Task NewGame() => hubConnection.SendAsync("NewGame", GameId);

  private string connectionUrl => $"http://kyler0.iptime.org:31313/{NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}";

  public bool IsConnected =>
      hubConnection.State == HubConnectionState.Connected;

  public void Dispose()
  {
    _ = hubConnection.DisposeAsync();
  }

  private void SetLanguage()
  {
    stringResource = new Dictionary<string, Dictionary<string, string>>();
    stringResource.Add("en-US", new Dictionary<string, string>());
    stringResource.Add("ko-KR", new Dictionary<string, string>());

    stringResource["en-US"].Add("GameTitle", "Connect6");
    stringResource["ko-KR"].Add("GameTitle", "육목");

    stringResource["en-US"].Add("CopyLinkInstruction", "Copy the link below and share with others to play together.");
    stringResource["ko-KR"].Add("CopyLinkInstruction", "아래 링크를 복사해 다른 사람과 공유하면 함께 플레이 하실 수 있습니다.");

    stringResource["en-US"].Add("NewGameButton", "Play new game with current users");
    stringResource["ko-KR"].Add("NewGameButton", "현 유저들과 새 게임 시작하기");

    stringResource["en-US"].Add("UndoButton", "Undo");
    stringResource["ko-KR"].Add("UndoButton", "되감기");

    stringResource["en-US"].Add("ExpirationMessage", "Game session will expire if no activities for 30 minutes.");
    stringResource["ko-KR"].Add("ExpirationMessage", "30분동안 게임 진행이 없으면 세션이 종료됩니다.");

    stringResource["en-US"].Add("NoGameFound", "No game found. Check the address.");
    stringResource["ko-KR"].Add("NoGameFound", "진행중인 게임이 없습니다. 주소를 확인해보세요.");

    stringResource["en-US"].Add("TurnMessage", "{0}'s turn. Remaining Moves: {1}");
    stringResource["ko-KR"].Add("TurnMessage", "{0} 차례. 남은 횟수: {1}");

    stringResource["en-US"].Add("VictoryMessage", "{0} has won.");
    stringResource["ko-KR"].Add("VictoryMessage", "{0}이 승리하였습니다.");

    stringResource["en-US"].Add("CurrentSessionUsersMessage", "{0} person(s) currently connected to this session.");
    stringResource["ko-KR"].Add("CurrentSessionUsersMessage", "현재 {0}명이 이 게임 세션에 참여하고 있습니다.");

    stringResource["en-US"].Add("Black", "Black Stone");
    stringResource["ko-KR"].Add("Black", "흑돌");

    stringResource["en-US"].Add("White", "White Stone");
    stringResource["ko-KR"].Add("White", "백돌");

    // Parse query params
    var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("lang", out var languageCodeValue))
    {
      languageCode = languageCodeValue.First();
      if (!stringResource.ContainsKey(languageCode))
        languageCode = "en-US";
    }
    else
      languageCode = "en-US";
  }

  private void SetSvgCollection()
  {
    Dictionary<char, string> svgString = new Dictionary<char, string>();
     svgString.Add('7', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPHJlY3Qgd2lkdGg9IjUwMCIgaGVpZ2h0PSI1MDAiIGZpbGw9IiNEQ0IzNUMiLz4KPHBhdGggc3Ryb2tlPSIjMDAwIiBzdHJva2Utd2lkdGg9IjIwIiBkPSJNMjQwLDI1MEg1MDBNMjUwLDI0MFY1MDAiLz4KPC9zdmc+"
    )));
    svgString.Add('8', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPHJlY3Qgd2lkdGg9IjUwMCIgaGVpZ2h0PSI1MDAiIGZpbGw9IiNEQ0IzNUMiLz4KPHBhdGggc3Ryb2tlPSIjMDAwIiBzdHJva2Utd2lkdGg9IjIwIiBkPSJNMCwyNTBINTAwTTI1MCwyNDBWNTAwIi8+Cjwvc3ZnPg=="
    )));
    svgString.Add('9', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPHJlY3Qgd2lkdGg9IjUwMCIgaGVpZ2h0PSI1MDAiIGZpbGw9IiNEQ0IzNUMiLz4KPHBhdGggc3Ryb2tlPSIjMDAwIiBzdHJva2Utd2lkdGg9IjIwIiBkPSJNMCwyNTBIMjYwTTI1MCwyNDBWNTAwIi8+Cjwvc3ZnPg=="
    )));
    svgString.Add('4', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPHJlY3Qgd2lkdGg9IjUwMCIgaGVpZ2h0PSI1MDAiIGZpbGw9IiNEQ0IzNUMiLz4KPHBhdGggc3Ryb2tlPSIjMDAwIiBzdHJva2Utd2lkdGg9IjIwIiBkPSJNMjQwLDI1MEg1MDBNMjUwLDBWNTAwIi8+Cjwvc3ZnPg=="
    )));
    svgString.Add('5', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIj8+PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj48cmVjdCB3aWR0aD0iNTAwIiBoZWlnaHQ9IjUwMCIgZmlsbD0iI0RDQjM1QyIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLXdpZHRoPSIyMCIgZD0iTTAsMjUwSDUwME0yNTAsMFY1MDAiLz48L3N2Zz4="
    )));
    svgString.Add('6', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPHJlY3Qgd2lkdGg9IjUwMCIgaGVpZ2h0PSI1MDAiIGZpbGw9IiNEQ0IzNUMiLz4KPHBhdGggc3Ryb2tlPSIjMDAwIiBzdHJva2Utd2lkdGg9IjIwIiBkPSJNMCwyNTBIMjYwTTI1MCwwVjUwMCIvPgo8L3N2Zz4="
    )));
    svgString.Add('1', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPHJlY3Qgd2lkdGg9IjUwMCIgaGVpZ2h0PSI1MDAiIGZpbGw9IiNEQ0IzNUMiLz4KPHBhdGggc3Ryb2tlPSIjMDAwIiBzdHJva2Utd2lkdGg9IjIwIiBkPSJNMjQwLDI1MEg1MDBNMjUwLDBWMjYwIi8+Cjwvc3ZnPg=="
    )));
    svgString.Add('2', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPHJlY3Qgd2lkdGg9IjUwMCIgaGVpZ2h0PSI1MDAiIGZpbGw9IiNEQ0IzNUMiLz4KPHBhdGggc3Ryb2tlPSIjMDAwIiBzdHJva2Utd2lkdGg9IjIwIiBkPSJNMCwyNTBINTAwTTI1MCwwVjI1MCIvPgo8L3N2Zz4="
    )));
    svgString.Add('3', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPHJlY3Qgd2lkdGg9IjUwMCIgaGVpZ2h0PSI1MDAiIGZpbGw9IiNEQ0IzNUMiLz4KPHBhdGggc3Ryb2tlPSIjMDAwIiBzdHJva2Utd2lkdGg9IjIwIiBkPSJNMCwyNTBIMjYwTTI1MCwwVjI2MCIvPgo8L3N2Zz4="
    )));
    svgString.Add('+', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPHJlY3Qgd2lkdGg9IjUwMCIgaGVpZ2h0PSI1MDAiIGZpbGw9IiNEQ0IzNUMiLz4KPHBhdGggc3Ryb2tlPSIjMDAwIiBzdHJva2Utd2lkdGg9IjIwIiBkPSJNMCwyNTBINTAwTTI1MCwwVjUwMCIvPgo8Y2lyY2xlIGN4PSIyNTAiIGN5PSIyNTAiIHI9IjUwIi8+Cjwvc3ZnPg=="
    )));
    svgString.Add('b', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIj8+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iNTAwIiBoZWlnaHQ9IjUwMCI+CjxkZWZzPjxyYWRpYWxHcmFkaWVudCBpZD0icmdiIiBjeD0iLjMiIGN5PSIuMyIgcj0iLjgiPgo8c3RvcCBvZmZzZXQ9IjAiIHN0b3AtY29sb3I9IiM3NzciLz4KPHN0b3Agb2Zmc2V0PSIuMyIgc3RvcC1jb2xvcj0iIzIyMiIvPgo8c3RvcCBvZmZzZXQ9IjEiIHN0b3AtY29sb3I9IiMwMDAiLz4KPC9yYWRpYWxHcmFkaWVudD48L2RlZnM+CjxyZWN0IHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIiBmaWxsPSIjRENCMzVDIi8+CjxjaXJjbGUgY3g9IjI1MCIgY3k9IjI1MCIgcj0iMjQ1IiBmaWxsPSJ1cmwoI3JnYikiLz4KPC9zdmc+"
    )));
    svgString.Add('w', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIj8+CjxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB3aWR0aD0iNTAwIiBoZWlnaHQ9IjUwMCI+CiAgICA8ZGVmcz4KICAgICAgPHJhZGlhbEdyYWRpZW50IGlkPSJyZ3ciIGN4PSIuNDciIGN5PSIuNDkiIHI9Ii40OCI+CiAgICAgICAgPHN0b3Agb2Zmc2V0PSIuNyIgc3RvcC1jb2xvcj0iI0ZGRiIvPgogICAgICAgIDxzdG9wIG9mZnNldD0iLjkiIHN0b3AtY29sb3I9IiNEREQiLz4KICAgICAgICA8c3RvcCBvZmZzZXQ9IjEiIHN0b3AtY29sb3I9IiM3NzciLz4KICAgICAgPC9yYWRpYWxHcmFkaWVudD4KICAgIDwvZGVmcz4KICAgIDxyZWN0IHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIiBmaWxsPSIjRENCMzVDIi8+CiAgPGNpcmNsZSBjeD0iMjUwIiBjeT0iMjUwIiByPSIyNDUiIGZpbGw9InVybCgjcmd3KSIvPgo8L3N2Zz4="
    )));
    svgString.Add('B', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPGRlZnM+PHJhZGlhbEdyYWRpZW50IGlkPSIkcmdiYyIgY3g9Ii4zIiBjeT0iLjMiIHI9Ii44Ij4KIDxzdG9wIG9mZnNldD0iMCIgc3RvcC1jb2xvcj0iIzc3NyIvPgogPHN0b3Agb2Zmc2V0PSIuMyIgc3RvcC1jb2xvcj0iIzIyMiIvPgogPHN0b3Agb2Zmc2V0PSIxIiBzdG9wLWNvbG9yPSIjMDAwIi8+CjwvcmFkaWFsR3JhZGllbnQ+PC9kZWZzPgo8cmVjdCB3aWR0aD0iNTAwIiBoZWlnaHQ9IjUwMCIgZmlsbD0iI2RjYjM1YyIvPgo8Y2lyY2xlIGN4PSIyNTAiIGN5PSIyNTAiIHI9IjI0NSIgZmlsbD0idXJsKCMkcmdiYykiLz4KPHJlY3Qgd2lkdGg9IjI2MCIgaGVpZ2h0PSIyNjAiIHg9IjEyMCIgeT0iMTIwIiBmaWxsPSJub25lIiBzdHJva2U9IiNGRkYiIHN0cm9rZS13aWR0aD0iMTgiIHN0cm9rZS1saW5lam9pbj0icm91bmQiIC8+Cjwvc3ZnPg=="
    )));
    svgString.Add('W', Encoding.UTF8.GetString(System.Convert.FromBase64String(
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI1MDAiIGhlaWdodD0iNTAwIj4KPGRlZnM+PHJhZGlhbEdyYWRpZW50IGlkPSIkcmd3YyIgY3g9Ii40NyIgY3k9Ii40OSIgcj0iLjQ4Ij4KIDxzdG9wIG9mZnNldD0iLjciIHN0b3AtY29sb3I9IiNGRkYiLz4KIDxzdG9wIG9mZnNldD0iLjkiIHN0b3AtY29sb3I9IiNEREQiLz4KIDxzdG9wIG9mZnNldD0iMSIgc3RvcC1jb2xvcj0iIzc3NyIvPgo8L3JhZGlhbEdyYWRpZW50PjwvZGVmcz4KPHJlY3Qgd2lkdGg9IjUwMCIgaGVpZ2h0PSI1MDAiIGZpbGw9IiNkY2IzNWMiLz4KPGNpcmNsZSBjeD0iMjUwIiBjeT0iMjUwIiByPSIyNDUiIGZpbGw9InVybCgjJHJnd2MpIi8+CjxyZWN0IHdpZHRoPSIyNjAiIGhlaWdodD0iMjYwIiB4PSIxMjAiIHk9IjEyMCIgZmlsbD0ibm9uZSIgc3Ryb2tlPSIjMDAwIiBzdHJva2Utd2lkdGg9IjE4IiBzdHJva2UtbGluZWpvaW49InJvdW5kIiAvPgo8L3N2Zz4="
    )));

    svgCollection = new Dictionary<char, MarkupString>();
    foreach (var keyValuePair in svgString)
    {
      svgCollection.Add(
        keyValuePair.Key,
        new MarkupString(
          keyValuePair.Value.Replace(
            "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"500\">",
            "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 500\" height=\"35\">"
          )
        )
      );
    }
  }
}