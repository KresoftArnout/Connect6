@page "/game/{GameId}"
@using Microsoft.AspNetCore.SignalR.Client
@using System
@using System.Collections.Generic
@using System.Text
@using System.Threading
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@implements IDisposable
@inject IJSRuntime jsRuntime

<div style="text-align: center;">
  <h2>@stringResource[languageCode]["GameTitle"]</h2>
  @if (boardLineStrings.Count > 0)
  {
    <div>@stringResource[languageCode]["CopyLinkInstruction"]</div>
    <a href="@connectionUrl">@connectionUrl</a>
    <div>@connectedUsersMessage</div>

    <hr>
      @if (reconnectTimer >= 0)
      {
        <h3>@String.Format(stringResource[languageCode]["DisconnectRefresh"], reconnectTimer)</h3>
      }
      else
      {
        <h3>@turnMessage</h3>
      }
      @if (winnerExist)
      {
        <div>
          <button @onclick="NewGame" disabled="@(!IsConnected || lastPlayX == -1)">@stringResource[languageCode]["NewGameButton"]</button>
        </div>
        <br/>
      }
      <div style="zoom: @zoomFactor">
        <table order="0" cellspacing="0" cellpadding="0" style="border:0; border-collapse:collapse; padding:@(cellSize * 2.5f); font-size:1px; display: inline;">
          <tbody>
            @for (int j = 0; j < boardLineStrings.Count;++j)
            {
              <tr style="vertical-align:top; border:none;">
                @for (int i = 0; i < boardLineStrings[j].Length; ++i)
                {
                  var x = i;
                  var y = j;
                  <td>
                    @if ((x == lastPlayX && y == lastPlayY) || (x == lastLastPlayX && y == lastLastPlayY))
                    {
                      <img @onclick="@(e => Play(x, y))" style="width @(cellSize)px; height: @(cellSize)px" src="data:image/png;base64,@pngCollection[Char.ToUpper(boardLineStrings[j][i])]" />
                    }
                    else
                    {
                      <img @onclick="@(e => Play(x, y))" style="width @(cellSize)px; height: @(cellSize)px;" src="data:image/png;base64,@pngCollection[boardLineStrings[j][i]]" />
                    }
                  </td>
                }
              </tr>
            }
          </tbody>
        </table>
      </div>

      <br/><br/>
      <p>
        <button @onclick="Undo" disabled="@(!IsConnected || lastPlayX == -1)">@stringResource[languageCode]["UndoButton"]</button>
      </p>
    <hr>
    <div>@stringResource[languageCode]["ExpirationMessage"]</div>
  }

  <div>@serverMessage</div>
</div>

@code {
  private int cellSize = 35;
  private float zoomFactor = 1.0f;
  private HubConnection hubConnection;
  private List<string> boardLineStrings = new List<string>();
  private string connectedUsersMessage;
  private string turnMessage;
  private string serverMessage;
  private int lastPlayX = -1;
  private int lastPlayY = -1;
  private int lastLastPlayX = -1;
  private int lastLastPlayY = -1;
  private char winnerChar = 'n';
  private string languageCode;
  private int reconnectTimer = -1;
  private Dictionary<char, String> pngCollection;

  private Dictionary<string, Dictionary<string, string>> stringResource;

  [Parameter]
  public string GameId { get; set; }

  protected override async Task OnInitializedAsync()
  {
    SetLanguage();
    SetPngCollection();

    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/connect6hub"))
      .Build();

    hubConnection.KeepAliveInterval = TimeSpan.FromSeconds(7);
    hubConnection.Closed += _ => {
      reconnectTimer = 15;
      var timer = new Timer(new TimerCallback(_ =>
      {
          if (reconnectTimer <= 0)
          {
            NavigationManager.NavigateTo(connectionUrl, true);
            return;
          }
          --reconnectTimer;
          this.StateHasChanged();
      }), null, 1000, 1000);

      return Task.CompletedTask;
    };

    hubConnection.On<Dictionary<string, string>>("CurrentBoard", async (currentState) =>
    {
      var tempBoard = currentState["boardString"].Split("\n").ToList();
      lastPlayX = int.Parse(currentState["lastPlayX"]);
      lastPlayY = int.Parse(currentState["lastPlayY"]);
      lastLastPlayX = int.Parse(currentState["lastLastPlayX"]);
      lastLastPlayY = int.Parse(currentState["lastLastPlayY"]);
      winnerChar = DetermineWinner(tempBoard, lastPlayX, lastPlayY);

      if (winnerExist)
        turnMessage = String.Format(
          stringResource[languageCode]["VictoryMessage"],
          winnerChar == 'b' ? stringResource[languageCode]["Black"] : stringResource[languageCode]["White"]
        );
      else
        turnMessage = String.Format(
          stringResource[languageCode]["TurnMessage"],
          currentState["currentTurn"] == "b" ? stringResource[languageCode]["Black"] : stringResource[languageCode]["White"],
          currentState["currentTurnRemaining"]
        );

      bool firstTimeRunning = (boardLineStrings.Count == 0);
      boardLineStrings = tempBoard;

      if (firstTimeRunning)
        await BrowserHasResized();
      StateHasChanged();
    });

    hubConnection.On<string>("ServerMessage", (messageString) =>
    {
      serverMessage = messageString;
      StateHasChanged();
    });

    hubConnection.On<string>("NoGameFound", (messageString) =>
    {
      serverMessage = stringResource[languageCode]["NoGameFound"];
      StateHasChanged();
    });

    hubConnection.On<int>("ConnectionSize", (connectionSize) =>
    {
      connectedUsersMessage = String.Format(stringResource[languageCode]["CurrentSessionUsersMessage"], connectionSize);
      StateHasChanged();
    });

    await hubConnection.StartAsync();
    await hubConnection.SendAsync("InitializeBoardAndConnection", GameId);

    BrowserResizeService.OnResize += BrowserHasResized;
    await jsRuntime.InvokeAsync<object>("browserResize.registerResizeCallback");
  }

  private async Task BrowserHasResized()
  {
    float newWidth = await jsRuntime.InvokeAsync<int>("browserResize.getInnerWidth");
    float totalBoardWidth = cellSize * boardLineStrings[0].Length + cellSize * 2.5f;
    if (newWidth < totalBoardWidth)
      zoomFactor = newWidth / totalBoardWidth;
    else
      zoomFactor = 1.0f;
    StateHasChanged();
  }

  private char DetermineWinner(List<String> tempBoard, int lastPlayX, int lastPlayY)
  {
    if (IsVictory('b', tempBoard, lastPlayX, lastPlayY))
      return 'b';
    else if (IsVictory('w', tempBoard, lastPlayX, lastPlayY))
      return 'w';
    else
      return 'n';
  }

  private bool IsVictory(char stoneColor, List<String> tempBoard, int lastPlayX, int lastPlayY)
  {
    int dimX = tempBoard[0].Length;
    int dimY = tempBoard.Count;
    if (!IsWithinBoundary(dimX, dimY, lastPlayX, lastPlayY))
      return false;

    StringBuilder sb = new StringBuilder();
    string winningString = $"{stoneColor}{stoneColor}{stoneColor}{stoneColor}{stoneColor}{stoneColor}";

    // Horizontal Match
    sb.Clear();
    for (int i = 0; i < dimX; ++i)
      sb.Append(tempBoard[lastPlayY][i]);
    if (sb.ToString().Contains(winningString))
      return true;

    // Vertical Match
    sb.Clear();
    for (int j = 0; j < dimY; ++j)
      sb.Append(tempBoard[j][lastPlayX]);
    if (sb.ToString().Contains(winningString))
      return true;

    // Diagonal left
    int ii = lastPlayX;
    int jj = lastPlayY;
    while (IsWithinBoundary(dimX, dimY, ii - 1, jj - 1))
    {
      --ii;
      --jj;
    }
    sb.Clear();
    while (IsWithinBoundary(dimX, dimY, ii, jj))
    {
      sb.Append(tempBoard[jj][ii]);
      ++ii;
      ++jj;
    }
    if (sb.ToString().Contains(winningString))
      return true;
    // Diagonal right
    ii = lastPlayX;
    jj = lastPlayY;
    while (IsWithinBoundary(dimX, dimY, ii - 1, jj + 1))
    {
      --ii;
      ++jj;
    }
    sb.Clear();
    while (IsWithinBoundary(dimX, dimY, ii, jj))
    {
      sb.Append(tempBoard[jj][ii]);
      ++ii;
      --jj;
    }
    if (sb.ToString().Contains(winningString))
      return true;

    return false;
  }

  private Boolean IsWithinBoundary(int dimX, int dimY, int x, int y) => 0 <= x && x < dimX && 0 <= y && y < dimY;

  private Task Play(int x, int y)
  {
    if (winnerExist)
      return Task.CompletedTask;
    else
      return hubConnection.SendAsync("PlaceStone", GameId, x, y);
  }

  Task Undo() => hubConnection.SendAsync("UndoStone", GameId);

  Task NewGame() => hubConnection.SendAsync("NewGame", GameId);

  private string connectionUrl => $"https://kyler.ddnsfree.com/{NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}";

  private bool winnerExist => winnerChar != 'n';

  public bool IsConnected =>
      hubConnection.State == HubConnectionState.Connected;

  public void Dispose()
  {
    _ = hubConnection.DisposeAsync();
    BrowserResizeService.OnResize -= BrowserHasResized;
  }

  private void SetLanguage()
  {
    stringResource = new Dictionary<string, Dictionary<string, string>>();
    stringResource.Add("en-US", new Dictionary<string, string>());
    stringResource.Add("ko-KR", new Dictionary<string, string>());

    stringResource["en-US"].Add("GameTitle", "Connect6");
    stringResource["ko-KR"].Add("GameTitle", "육목");

    stringResource["en-US"].Add("DisconnectRefresh", "Service interrupted. We'll try to reconnect in {0} seconds. Refresh the page if it doesn't work.");
    stringResource["ko-KR"].Add("DisconnectRefresh", "서비스 연결이 끊겼습니다. {0}초 후에 자동으로 재접속 합니다. 그래도 바둑판이 보이지 않으면 새로고침을 해주세요.");

    stringResource["en-US"].Add("CopyLinkInstruction", "Copy the link below and share with others to play together.");
    stringResource["ko-KR"].Add("CopyLinkInstruction", "아래 링크를 복사해 다른 사람과 공유하면 함께 플레이 하실 수 있습니다.");

    stringResource["en-US"].Add("NewGameButton", "Play new game with current users");
    stringResource["ko-KR"].Add("NewGameButton", "현 유저들과 새 게임 시작하기");

    stringResource["en-US"].Add("UndoButton", "Undo");
    stringResource["ko-KR"].Add("UndoButton", "되감기");

    stringResource["en-US"].Add("ExpirationMessage", "Game session will expire if no activities for 30 minutes.");
    stringResource["ko-KR"].Add("ExpirationMessage", "30분동안 게임 진행이 없으면 세션이 종료됩니다.");

    stringResource["en-US"].Add("NoGameFound", "No game found. Check the address.");
    stringResource["ko-KR"].Add("NoGameFound", "진행중인 게임이 없습니다. 주소를 확인해보세요.");

    stringResource["en-US"].Add("TurnMessage", "{0}'s turn. Remaining Moves: {1}");
    stringResource["ko-KR"].Add("TurnMessage", "{0} 차례. 남은 횟수: {1}");

    stringResource["en-US"].Add("VictoryMessage", "{0} has won.");
    stringResource["ko-KR"].Add("VictoryMessage", "{0}이 승리하였습니다.");

    stringResource["en-US"].Add("CurrentSessionUsersMessage", "{0} person(s) currently connected to this session.");
    stringResource["ko-KR"].Add("CurrentSessionUsersMessage", "현재 {0}명이 이 게임 세션에 참여하고 있습니다.");

    stringResource["en-US"].Add("Black", "Black Stone");
    stringResource["ko-KR"].Add("Black", "흑돌");

    stringResource["en-US"].Add("White", "White Stone");
    stringResource["ko-KR"].Add("White", "백돌");

    // Parse query params
    var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("lang", out var languageCodeValue))
    {
      languageCode = languageCodeValue.First();
      if (!stringResource.ContainsKey(languageCode))
        languageCode = "en-US";
    }
    else
      languageCode = "en-US";
  }

  private void SetPngCollection()
  {
    pngCollection = new Dictionary<char, string>();
    pngCollection.Add('7', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAAaUlEQVRYR+2UuQ0AIAzEYBfWYQPGYwPWyS48PSlOgETh1Eg5OeaitdLDJxMJ41wCMp6ikIGMWl84gzM4oxLAGZXYlZ5Juap7t++vhbFWjgMR5ulvWs5wph1iyHjiQQYyaq/jDM7gzCQwAKiXmjc2j4T0AAAAAElFTkSuQmCC");
    pngCollection.Add('8', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAAaElEQVRYR+2WwQkAIQwEN71cO3ZgeXZgO/aiBUgeCx6ITN4+wmSyJkavU5dU0EwyCchkikIGMm584QzO4IxLAGdcYiHprePqK02jVxfE9v5IAtNMNgfIQMbdUZzBGZyRxN/066X3ZM4sOHiXN27xx5cAAAAASUVORK5CYII=");
    pngCollection.Add('9', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAAbElEQVRYR+2WwQ0AIQgEl15sxw4szw5sx168Au54bMIlPoa3CWSYrMRe4+iSCoZJNgGZTFHIQMaNL5zBGZxxCeCMSywklRxXew239+t9Sei1PsUwX7uATGYoZCDjphfO4AzOSOLX/vXsrMqZB6/mmSKZ3FhvAAAAAElFTkSuQmCC");
    pngCollection.Add('4', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAAZklEQVRYR+3XwQ0AEAyF4WcX69ig49nAOt2FBfTQuCC/s0jzfGkpPmzqcNXW5cMOT5EKxQQZkkyEi2RIJtt4MIMZzDC1IwPXJZPFuttP06PpZR1hBjOYuW4c8NfeoeSannnPfAd4AczDzTexkvXVAAAAAElFTkSuQmCC");
    pngCollection.Add('5', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAAaUlEQVRYR+2YQQ0AIAzEDi/YwQHycICdeQEFe1zGg0cRQEjT3TZa7HlUPH0sxZ7FW6TGYxKGkMnkggxk3ODBGZzBGbp25sAzMpLKw5UrKqXtEqMd4AzOPAs9ljiWOLOcSGAS2FTmr8+iC1ykyjeF/LVCAAAAAElFTkSuQmCC");
    pngCollection.Add('6', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAAbElEQVRYR+2XwQ0AIAjEzl1cxw0czw1cx100/uVB4GNSBzDkKFLLmn0reGobWrMHb5EKxRgZkowFF8mQjPfhgRmYgRm2tsVAWjKSwnJ1i0SuXq1KaxPaiXY69wEKgUI4keF7awbGNDFNX0/TAdQSzCJD8pLvAAAAAElFTkSuQmCC");
    pngCollection.Add('1', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAAbElEQVRYR+2VwQ0AEBAETy/a0YHydKAdvRB/99g4icd4y2UzN1YavU67PLk0G71eTjFLhHEYQsaTCzKQUYsHZ3AGZ/i1PQe+I6PKerofUnoRQfYMwjxtYNYURYA1qSR52jiDMyoBnFGJfdUzC2Q9mjf+Q4gtAAAAAElFTkSuQmCC");
    pngCollection.Add('2', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAAbklEQVRYR+2WQRHAIAwEDy/YqQPk1QF24qVVkMdNwgyPRQBk9jYJI/b6VDzzeRV7FW+RBsUkDCGTyQUZyLiDB2dwBmfY2pkDbWQklT9XrqhHW5tiuggQk0uyZWu7jxKTS4yYcAZnXAI44xK7as789A+XN9TW9ZEAAAAASUVORK5CYII=");
    pngCollection.Add('3', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAAcklEQVRYR+2WQQ0AIQwEFy/YOQfIwwF28HKXE9DHpiXhMQiAzXRa2vYar5KnP1N7jeQtUiNMwBAykVyQgYw7eHAGZ3CGXztyoIyMpPRy9Ye8Zrlyu+bonCFMFQHK5JIsWSHcRymTS4wy4QzOuARwxiX2AWuMmSKX60MeAAAAAElFTkSuQmCC");
    pngCollection.Add('+', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAAsklEQVRYR2O8sznmPwOFQMV3CcOdzTEUmsLAwDjqGBxhOBoyuBLXaMiMhgypBc9omhlNMyM3zTx68ZnBKXUjPAD2zw5gkJXgITVA4OrJzk0Pn39mcE5DOARm4r7ZAQxyZDqIbMeA2jC4ALltG0YGBgaKG1dkxwuaxsEVMuS29B49/8zghCXNUJKIyQ4ZUAgPmtyEHN2jDXJcuWY0ZEZDhtQSdTTNjKaZ0TTDMDo+gzsRAABbANY3SlshCgAAAABJRU5ErkJggg==");
    pngCollection.Add('b', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAEy0lEQVRYR52Ya2wUVRTH/7Pv3VYIahEoEiPIByU+0CqiqIEVq4KBWj9goNYAX0xBEj+o8QMh4AtMNCZqTNRoFB+hBglglFYeaSO0SCMCGgxRERFpm8aq++g+Oubc5Qx37t47O9smN3dmdnfOb/7nf869U+vUzuU2xvD3y9kUdn97DvuO9COVziMRC+Ke2ROx6M4pmD61dgx3BKxqYFo3HsEf/RnYdomfZnWMjo461+rrYtj20l2+wXzBND3bi1Sm6ARhEJrl4AzG13iujQfR+ea9FaE8YbqODmHLx78hEAjAsiwBQwGKxSIKhYILRIaSYeTjl9fMxvyGyUYoI0zLpmNIZYFQKIRgMFgGk8/nkcvlQLNJEQJRwS4dF8GeNxZqgbQwTc99j3A4inA4LAbBkDoUlFUhiJGREWSzWQdIDc5KqkABCzj84eIyoDIYUmSkEEI0GhWDYEgdGYZBGCaTyQhInRKmlJFCnW81uoBcMD0n/sbmT84gHo+LEYvFEIlEBBDDkFcoPaQIDQKhQceyEiYIGfi1p27D3TdPcoBcMA893ScgEomEC4gUYhgCIUUYIp1Oi2OaWZ1qoI5+urQcpumZHoxaUQGiDlKI1KFgrAZDpFIpAUKDzcxPr0ubCnpJIoTu90r+cZS5b91BB6KmpsYFROekGKnCgRlChqHPvVRRU8fnP3zWdBFm9Yt9OP1X1ghDIOQdUoZTIkPxtbHCzJw2Du1bkiVlkmu6RR9hv3Ca2MTkGaooehI2rwzFx3IjlFNlKnE5jce3NZdgFrR1CYPS0+vMy72GfkwBycA6E5uCVkod3fdE+yOwOt5eaq96oU8oQ82Ny5r7DAGa+oxc3mTeSob1gtrx6kJYT7bMsbfv/9NZf0gFqh6C4R5DMLw2cQfmEicgUokDqbOffkPfWfHgNbBumjXdHhzOiWC8IBKQ3H1NaxNBEJS6SuvOTZXEak66LA5ran29DctywXDK5KWArvGWgXxDQ14kZUV03qnkJ8CGdcO1V9mDw3kBI6vDwUktVoxhKFW6zZVpG1EJhH4nlFm7vMFu33vWgWEonk2bD90uT74mm9lLKf7sscUzqZqW2CvWH3KenhWRYfiavMPzs/WsRqldr99f6jN3rOrQKiPWiwtekRVSQeSU6QBMlSYrdvKLZSWYuSv3uGBkCB2MqpApZZWUkSEdmNYNB3Hy9D9GIJ1vdOrIwVX/eG1NZ82YgM9faby4as95/KvSynmhqtQUsUIM4VcdXcmraft5x6PuLUTyiQ78my44HpGN7FcZNV2qUrq0ja+NoPejh90wdNbQstuojAokp0nXc3Q+0sGwKq7NFZ0cOjaAts09Zep49RoVpFIzlFP0/ob5mHujYQ9MN1q0rhPnBjOeQKpvvHqOKXVT6hLY/84S13Nq35tubdmJQrH0Pu2ntGU1vFLGaQoGLPy0fVmZ4MY3ysa2r3F+KGvKkOvlv5rKmnx5AgfedSvCQTzftXuPD2D1pu6qgLxS9sHGBbj9+iuM9/P1X4h5K3dh+L+cuInsF1URU4qofA9vbTZC+FJG/XXr+gP47scBF5CpxOm3t1xXh63PJytCjAlGvuupM8No/+ZXfNn1O/qH0pg4IY4H5k1Dc/JqzLhyvG8A+Yv/A0MrvbFfDuVhAAAAAElFTkSuQmCC");
    pngCollection.Add('w', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAFe0lEQVRYR8WY60+bZRjGr7ellJYyKAWkHBrO2DEY5ymMReOMRmOiUzwkuMRs+kf4wb/BxE8SjZkxMSbGaIgmGpNFzoEIyFFhjIOlQCkwYJxa2prrIc+7tpTRsTLv5M4LAcov131+lTttLQGcwta2dfhnORF3Vw3wHijQaf0oSNtD6VPbSE30nuITAeVRYH4atUFryMC5c+dgMBgQHx8PRVHg9/vh8Xiws7ODzc1NrK+vi++TDQd4u2Y5arCoYH65Uw5LRg7S09ORmpoqYOLi4gQIPRAICKCDgwNsbGxgdXUVKysrcDqdAkwf58f1ZxZPhHoojGMzBU6lAbm5ucjMzBRKaLVaaDQa4QSRJoF8Ph/o+/v7AmZ+fh4zMzPY3d3Fi/Y15Fl2j4U6Fua2owa5+Xbk5+cjISEBOp1OqEEYCRQOQwgqxKfX6xVKbW9vY3p6GpOTk3C5XDDE+9BSvxQRKCLM7cUmPG0/j5ycHKEGnSDBQOHKEEKCEIJOIOYOneqMj4/D4XBAowA3GheOAB2B6Vi6hNKyGmRlZUGv16swBKET4iQjFEHoDBdh+JydncXIyAgWFhYiKhQC49o1w5PxJvLy8gQIwxOszEkQ4T+nOoQIdoZrcHBQJPZL51dhS91T/ywEZgLvoKysTEBIJ1Q0ahwHKpN5b28PdJb/0NAQBgYGRFg/vPwgXCpM9+oVVNc2ICUlRfQQQvD5OCASkEAEYUXRmch9fX2Ym5sLKXsV5q7+OkpKSgSAdCZtrIz5I2GozujoKHp7e0XlSXUETJ+7BuW1V2E2m2E0GgUMwxRrC4ZZXFxET0+P6EUWkxfXKl2H4+Avzxuorq5WFUlMTBS9JNZGdagKofikMsPDw+LfUB0BM2f8AEVFRUIV6bEG4eexSxNC+tjYGLq6utRQKYM/fBTw5twUfUWCMHnPyqQqBGIj7OjowNbWFt6qdkH5+ZtPAraLzbBYLCJMBGJvOStjzyEIxwTzpr29XQzV8qz7UG598VmgvvEqkpOTVWXYac/K5KpBGJY4YQhl0vugtLZ+HmhquvK/wTBMrCguAMpXrZ8Gap99QYRJlvWTCBNDJcNEhRKpTNutjwPWsmtiX3kSCSxHAsPEDkxluJCVZ9+HMvD9zcBmWgsKCgpUGCbyWVh4aU9MTKCzs1OsG82sJvaZMX8zKioq1DCx6cViJkWa4sF9pr+/X0zwkKb3h+t5NDQ0qIs2w3UWvUaGiL2G5dzd3S3W0hCY36cLUXrxORGq4EEZy5HAURA8uRkizib2nXSTB69Xrjw4VXo3XkZdXR1MJpMYknJYBu+5p80j7i0ShM+1tTWxQkxNTamq8At1hfhxvBTllfXqGiE3vced3gSRmx7DQxiuD8wXNsAEnR/vXzo8Y0I2vd/+bUBVVZWYU4QgkNyDT5PQ3FXk/ksIQrGcueUtLR1eCBE3Pf7AcS8Bs77LorLYBCUMx4O8EKIJG0uY5SovA6kMmxwXcp4utFcuuJGdsq9G/8h18N2fVtgKK2C325GWlhZyHXDzk7fTw444eaYEXwgE4aki8yQpwYd3a0Pvp4h305ddWSgqLkVxcbF6O0kQCSNPW3nehl+UEoRPnii8CvikaZQAbjQ6j9TDsRflt/2ZMJmzxUVps9nESkoQKnLcRSmPOOYK1XG73SJHuLfw/qZxOr9X9wgXpUR23tPj178zhTpWqxUZGRni8Gf+HBcmVgxLd3l5WQxCTmRC0l694EZWUI6ESxPVW4ive63w+LQiqalQUlKSuoQRSlaNfCVCGB5p0mLyFiKcvG0kDUsbhyspc0WGSx78zJtgy0zex2vl7qh7ZVTKRPq09Z048eZqesWIHY8GxngfCtN3xZsrs/EgaoDgX/wPSNvGHnyAVJwAAAAASUVORK5CYII=");
    pngCollection.Add('B', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAFiUlEQVRYR62Ya0wcVRTH/8Ob5Q1SKCABW/mgjWIVrWjVtFBRW9IiJtS0CGkbgtlqEz+o8UPTtL5aE42JGhM1Gq3KQ0pTarSs2gZiCxVibYupaUBEKCzvx/JcWHPu9kzvzM7sLo2b3MzcYXbPb/7nf869g3L1xA4XbuLT2evAyV+v4Zc2OxzTC7CEBeKxtSuw+eEUrEqLvIlfBJTlwJQdbMO/9hm4XG5+OurH0tKSei01MQw1bz3iN5hfMEWvtsIxs6gGYRA6ysEZjK/xMTI8ELYP831CeYVpujCCI1//jYCAACiKImAowOLiIpxOpwZEhpJh5PO3967FhpyVplCmMKWHLsIxCwQFBSEwMNADZmFhAfPz86CjmSIEogeLjw7BqQ82GQIZwhS99juCg0MRHBwsBsGQOhSUVSGIubk5zM7OqkD64KykHihAAc5/ucUDyAOGFJlzBiE0NFQMgiF1ZBgGYZiZmRkBaaSEWcpIIdtHBRogDUzL5TEc/qYH4eHhYoSFhSEkJEQAMQx5hdJDitAgEBp0LithBiEDv/fSA3j03mQVSANT+HK7gLBYLCpQfX29zyrw94aEhAQP4AvfbvOEKXqlBUtKqACRR01NDSoqKoQ6lApWY3p6WijicDhA5zTYzPz0sgoDAwMwgomyBKH5M7d/VGUe33dWhYiIiFDPq6qqYLVahVKUHg7MEDIM/d0sVWYwdP8fVUU3YPa82Y7u/llDmOrqalRWVgrvkDKkBgPRkWD42s3CZKVHo/ZInluZvL3Noo+wXzhNNK+rq0N5ebmoKJKdzStD8bncCOVU0dObKcNGv1RT7IbZaG0S1UJPL5uXqqmhoQElJSWi19AXKSCVNA2uJPaPWV+RYfRVxtCXa5+B0vjxNtfuN9qFMhSQy5r7jM1mQ2FhoWGfkcubzGvUZxjQbrcLA+sV4/nxdzdBebF0nevY6T51/aGqIUUIhpRqbm5Gfn6+uhxwB6Z0cdOjIwfVH1kJgomPjzc1+M6nbodyz5pVrqHxeRGMF0QC4u7b1taG3Nxcw7WJIAhKv0obzQcHBwWMmTLJCeFQ0lJTXVAUDQynjKA6OjqQnZ0t/s5bBvINDXmRlBUx8s7Q0BDi4uI8Fk6+F3BBufuODNfQ+IIIJqvDwTs7O5GVlaWBoVQZba7MthEUkGBiY2M1aZKhhTIv7Mhx1f7cq8IwFB+7urqQmZnp0fGNdnnyNdnMdH14eBgxMTGm3npuSxZV01bXzv3nVL+wIgzT3d2NjIwMFUbecvraespKjYyMCBizBbTh/Sfcfeah3Y2GylCwnp4epKena5TR74FlKKNU0f2jo6OIjo42NDt950r9djdM7q5TGhixaF03bG9vL9LS0gzTZKaMfudH87GxMURFRZlWngpTduAsrnRPGAL19fUhJSXFJ4zZ5pxNOjExgcjISEOYNavj8N07BTdW7XXlP7hXzutVxef9/f1ITk5WleIUyW8I/ph5cnIStBsw6kF/HX9Wu4XIe74Rk9NONSiniTpnUlKSX8p4e4eampoSS40+hTGRIWj96mktDM1ySk96KEOd8//60DKjh2FVNJsrmpy7OAjr4RYPdcxg9FVlNNd3Znn++YENyM022QNT0M37bLg2NOMVSO8bMwgjL7FnUhItOP3JVs1zGr433V96As5F9/s0e0evjlnz81buDBIYoODPY9s9BDd9oyyw/oiBkVlTuxjB+Oo79J2Vt1hw5lOtIhzE67t266VB7DnUvCwgbyn74uBGPHiXZ2X6BcM3rd/VgPGpeTGV/aLvNWbKUPmeP1rssyj9+pcI/0rZ/jP4rWNQA+TNO/fdmYijr+f5hFiWMka/drVnHLU/deH7pn9gH5nGirhwPLk+HcV5t2H1rTF+A8g3/gdRN2yxPRJCsgAAAABJRU5ErkJggg==");
    pngCollection.Add('W', "iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAFkElEQVRYR8WY+U/bZRzH31+glJYyjkKlHA03MlbGPS1j0Tij0ZjoFI8El5hN/wh/8G8w8SeJxsyYGBNjNEQTjckidyACciqMcchZWhgwrpa25v2Q50tb2lFGmU/y5JsFVl59f873V7nX2uzDY5y1bQ3+WUnEfacO7gMFmlgvCtL3UPrUNtIS3Y/xiYByGpifRiyI1Zlw4cIF6HQ6xMfHQ1EUeL1euFwu7OzsYHNzE+vr6+LfyboDvF2zEjFYRDC/3LPCaMpBRkYG0tLSBExcXJwA4fX5fALo4OAAGxsbcDqdWF1dxeLiogDTxnlx85mlE6EeCTO/mYJFxYbc3FxkZmYKJWJjYxETEyMuQeSRQB6PB7z7+/sCZm5uDtPT09jd3cWLZWvIM+6GhQoLc3e+Brn5ZcjPz0dCQgI0Go1QgzASKBiGEFSIT7fbLZTa3t7G1NQUJiYmYLfboYv3oLl+OSRQSJi7S414uuwicnJyhBq8BPEHClaGEBKEELwEYu7wUp2xsTHMz88jRgFuNSwcAzoG0758BaXlNcjKyoJWq1VhCMJLiJMOoQjCy3ARhs+ZmRkMDw9jYWEhpEIBMPbdVLhMbyIvL0+AMDz+ypwEEfxzqkMI/8twDQwMiMR+6aITlrQ99b8FwIzjHZSXlwsIefV6/WkZwv4+FWH5Dw4Oor+/X4T1w6tH4VJhupzXUF1rQ0pKiughVIZPJisr5SyHCc2cY7mzqpjIvb29mJ2dDSh7Fea+9iZKSkoEgLyyl5wVhl+ElcceRBiqMzIygp6eHlF5Uh0B0+uogbX2OlJTU8GwEIZhkh8SLRhCSJilpSV0d3eLXmQ0uHGj0n44Dv5yvYHq6mpVkcTERBGeaMPIkSGBqMzQ0JD4O1RHwMzqP0BRUZFQRV6ZI7LdnyVn5JdiwlIdeUdHR9HZ2amGShn44SOfO+e26CsShMl7HjAMt1SFQGyE7e3t2NrawlvVdig/f/OJz3K5CUajUYSJQOwt5wXDnkMQjgnmTVtbm6gya9ZDKHe++MxX33AdycnJqjLstOcFI/OGMCxxwhDKoPVAaWn53NfYeO1/g2GYWFFcAJSvWj711T77ggiTLOsnESaGSoaJCiVSmdY7H/vM5TfEvvIkEnhvb0/NGXZgKsNmaM1+CKX/+9u+zfRmFBQUqDBM5PPImeDSHh8fR0dHh1g3mlhN7DOj3iZUVFSoYWLTk6tCNPsMVwr/PtPX1ycmeEDT+8P+PGw2m7poM1yy10QTRvYYPlnOXV1dYi0NgPl9qhCll58TofIflBwJ0YShcyAIL0PE2cS+k2Fw4fXK1SOr0rPxMurq6mAwGMSQlMOS4TrroGSu8Is5HA4wgdfW1sQKMTk5qaoiRob0TT+OlcJaWa+uEXLTI9RZYAjCb8/Qs58QhusD84UNMEHjxftXDm1MwKb32782VFVViTlFdQjEZStahzswy5lb3vLyoUMIuenxB/MPEjDjuSoqi02QMLwcD9Ih+NuTcJBUkuUqnYHcgdnkuJDTuvC8csmB7JT9ozYSbG+/+9MMS2EFysrKkJ6eHuAOuPlJ7/QoEydtir9DIAitisyTpAQP3q0N9E8hfdOXnVkoKi5FcXGx6p0kiISR1lZWW7CjlCB8Mjx0BXzyxCg+3GpYPCZsWEf5bV8mDKnZwlFaLBaxkhKEioRzlNLEca+lOqwe5gj3FvpvHk7n9+pO4Sgl8uIDLX79O1OoYzabYTKZhPFn/oQLE3sIS3dlZUUMQlYQIXleveRAll+OBEsT0VuIr3vMcHliRVJToaSkJHUJIxSV8H8lQhiaNHmi8hYimLx1OB3LG4crKXNFhksa/uB+lJm8j9esjog7Q0TKhPq09Z048eZqalWPHVcM9PEeFGbsijdXqfqDiAH8f/E/fb/nHr1ijm4AAAAASUVORK5CYII=");
  }
}